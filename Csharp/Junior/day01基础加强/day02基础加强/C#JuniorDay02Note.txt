1、导入命名空间
	命名空间就是类的"文件夹"。类就是"文件夹"中的文件。需要导入命名空间
	添加引用：
		如果我需要在一个项目中，访问另一个项目中的某一个类
			--->添加对另一个项目的引用
			--->导入命名空间


2、静态和非静态
	静态成员：被static修饰
	实例成员：不被static修饰
	静态成员先于实例成员被加载到内存中，只有创建了对象，才有实例成员。
	静态类中只能存在静态成员
	调用：
		静态成员调用：
			类名.静态成员名;
		实例成员调用：
			实例名.实例成员;(实例就是我们的对象)
	什么时候使用静态？
		---->作为工具类
		---->在整个项目中资源共享，正因为它是资源共享的，所以静态成员必须要等到整个项目都结束的时候
		才会被资源释放。
		在我们的项目中应该尽可能的少使用静态成员。
		继承是创建对象的过程。
3、设计模式
		---->单例设计模式
			在整个程序中，我们要保证对象必须是唯一的。
			实现：
				---->第一步：构造函数私有化
				---->第二步：声明一个静态字段，作为全局唯一的单例对象
				---->第三步：声明一个静态函数，返回全局唯一的对象
		---->简单工厂设计模式
			核心：把所有的子类都当做父类来看待
			练习：
				提示用户分别的输入两个数字：
				再输入运算符：返回一个计算的父类，并调用方法得到结果。
				Add Sub Cheng Chu
	建筑行业最早应用到设计模式这个概念
		1、注册一个公司
				
		2、招兵买马
		3、投标买地
		4、安排施工队开始施工
		5、卖楼
		
		
		设计模式就是用来专门解决一些特定的问题。
		
4、类库
	.dll文件，我们使用类库来帮助我们封装一些常用的功能
		
		
		
5、值类型和引用类型		
	值类型：int double char bool decimal struct enum
	引用类型：string 数组 自定义类 接口 委托
	
	值类型的值存储在内存的栈上，引用类型的值存储在堆中。
	栈上存储数据的效率要高于堆。
		
	值传递：把值类型作为参数传递，把值本身进行传递。
		注意：
		ref可以把值传递改变为引用传递。
	引用传递：把引用类型的值作为参数传递，传递的是引用。
		


6、字符串的学习
	重要特性：
		不可变性，我们不管对字符串做什么操作，都会在内存中产生一块新的实例。
		驻留池
		我们可以将一个字符串看作是char类型的只读数组。
	GC:Garbage Collection垃圾回收	，每隔一段时间，会扫描整个内存，发现，如果有的空间没有被指向。则立即把它销毁。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		